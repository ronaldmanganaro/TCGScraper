name: Continious Deployment

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'docker/docker.ai'
      - 'streamlit/**'

jobs:
  filter:
    runs-on: self-hosted
    outputs:
      ai: ${{ steps.filter.outputs.ai }}
      streamlit: ${{ steps.filter.outputs.streamlit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ai:
              - 'docker/docker.ai'
            streamlit:
              - 'streamlit/**'

  build-streamlit:
    needs: filter
    if: needs.filter.outputs.streamlit == 'true'
    runs-on: rgbtower
    steps:
    - name: Checkout code with authentication
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.CM_PAT }}
        ref: main

    - name: Create .env file
      run: |
        echo SERVER_PORT=80 > docker\.env
        echo VOLUME_PATH=./streamlit >> docker\.env
        echo OLLAMA_VOLUME_PATH=/home/ubuntu/ollama >> docker/.env 
      shell: cmd

    - name: Build Streamlit Docker image with Compose
      run: |
        cd docker
        docker compose build streamlit

    - name: Log in to DockerHub
      run: echo %DOCKERHUB_PAT% | docker login -u "%DOCKERHUB_USERNAME%" --password-stdin
      shell: cmd
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PAT: ${{ secrets.DOCKERHUB_PAT }}

    - name: Push Streamlit image to DockerHub
      run: |
        docker tag streamlit ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

  deploy-ec2:
    needs: build-streamlit
    if: needs.build-streamlit.result == 'success'
    runs-on: ec2
    steps:
    - name: Checkout code with authentication
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.CM_PAT }}
        sparse-checkout: |
          docker/Dockerfile.streamlit
          docker/docker-compose.yml
        sparse-checkout-cone-mode: false
    
    - name: Deploy Latest Version of Streamlit with Compose
      run: |
        echo "OLLAMA_VOLUME_PATH=/home/ubuntu/ollama" >> docker/.env
        echo "SERVER_PORT=80" >> docker/.env
        echo "VOLUME_PATH=/home/ubuntu/postgres" >> docker/.env
        cd docker
        docker compose down steamlit
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
        docker compose up streamlit -d --no-build
